package main.java.streams;

import java.util.Arrays;
import java.util.List;
import static java.util.stream.Collectors.toList;
public class StreamOperations {
	
	public static List<Dish> getDishes(){
		List<Dish> menu = Arrays.asList(
				new Dish("pork", false, 800, Type.MEAT),
				new Dish("beef", false, 700, Type.MEAT),
				new Dish("chicken", false, 400, Type.MEAT),
				new Dish("french fries", true, 530, Type.OTHER),
				new Dish("rice", true, 350, Type.OTHER),
				new Dish("season fruit", true, 120, Type.OTHER),
				new Dish("pizza", true, 550, Type.OTHER),
				new Dish("prawns", false, 300, Type.FISH),
				new Dish("salmon", false, 450, Type.FISH) );
		return menu;
	}
	
	public static void printThreeHighestCalorElement(){
		getDishes().stream().filter(d -> d.getCalories() > 1000).map(d -> d.getName()).limit(3).forEach(d -> System.out.println(d));
	}
	
	public static void filteringExample(){
		List<Dish> dishes=getDishes().stream().filter(d -> d.isVegetarian()).collect(toList());
		System.out.println(dishes);
	}
	public static void filteringWithDistinctExample(){
		List<Integer> numbers = Arrays.asList(1, 2, 1, 3, 3, 2, 4);
		numbers.stream()
		.filter(i -> i % 2 == 0)
		.distinct()
		.forEach(System.out::println);
	}
	
	public static void filteringWithSkipExample(){
		getDishes().stream().filter(d -> d.getCalories() > 300).skip(2).collect(toList()).forEach(System.out::println);
	}
	
	public static void mappingExample(){
		getDishes().stream().map(d -> d.getName()).forEach(System.out::println);
		List<String> words = Arrays.asList("Java8", "Lambdas", "In", "Action");
		words.stream()
		.map(String::length)
		.collect(toList()).forEach(System.out::println);
	}
	
	public static void reductionExample(){
		int totalCalories = getDishes().stream().map(d -> d.getCalories()).reduce(0,(a,b)->a+b);
		System.out.println(totalCalories);
		
	}
	
	
	
	public static void main(String[] args) {
		mappingExample();
		
	}
}
