package main.java.matrix;

/**
 * In MS-Paint, when we take the brush to a pixel and click, the color of the
 * region of that pixel is replaced with a new selected color. Following is the
 * problem statement to do this task. Given a 2D screen, location of a pixel in
 * the screen and a color, replace color of the given pixel and all adjacent
 * same colored pixels with the given color.
 * 
 * 
 * 
 * The idea is simple, we first replace the color of current pixel, then recur
 * for 4 surrounding points. The following is detailed algorithm.
 * 
 * 
 * // A recursive function to replace previous color 'prevC' at '(x, y)' // and
 * all surrounding pixels of (x, y) with new color 'newC' and
 * floodFil(screen[M][N], x, y, prevC, newC) 1) If x or y is outside the screen,
 * then return. 2) If color of screen[x][y] is not same as prevC, then return 3)
 * Recur for north, south, east and west. floodFillUtil(screen, x+1, y, prevC,
 * newC); floodFillUtil(screen, x-1, y, prevC, newC); floodFillUtil(screen, x,
 * y+1, prevC, newC); floodFillUtil(screen, x, y-1, prevC, newC);
 * 
 * @author rdixi3
 *
 */
public class FloodFillAlgorithm {

}
