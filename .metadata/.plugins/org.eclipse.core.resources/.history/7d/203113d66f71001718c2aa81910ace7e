package main.java.tree.bst;

/**
 * 
 * 1. If root is NULL then return 2. if key is found then a. If its left subtree
 * is not null Then predecessor will be the right most child of left subtree or
 * left child itself. b. If its right subtree is not null The successor will be
 * the left most child of right subtree or right child itself. return 3. If key
 * is smaller then root node set the successor as root search recursively into
 * left subtree else set the predecessor as root search recursively into right
 * subtree
 * 
 * @author rdixi3
 *
 */
public class InorderSuccesorPredecessor {

	public static void preSuccesorInTree(BSTNode root, BSTNode succesor, BSTNode predecessor, int key) {
		if(root==null)
			return;
		if(root.getKey() == key){
			//for predecessor
			if(root.getLeft()!=null){
				
			}
			//for successor
			if(root.getRight()!=null){
				
			}
		}
		if(root.getKey() > key){
			succesor = root;
			preSuccesorInTree(root.getLeft(), succesor, predecessor, key);
		}
		if(root.getKey() < key){
			predecessor = root;
			preSuccesorInTree(root.getRight(), succesor, predecessor, key);
		}
	}

}
