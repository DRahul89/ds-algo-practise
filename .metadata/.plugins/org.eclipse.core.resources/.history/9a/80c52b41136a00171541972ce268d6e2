package main.java.tree;

public class LCAOfTreeNode {

	public static TreeNode<Integer> findLCA(TreeNode<Integer> root, int n1, int n2) {
		if (root == null)
			return null;
		if (root.getData() == n1 || root.getData() == n2) {
			return root;
		}
		TreeNode<Integer> leftLCA = findLCA(root.getLeft(), n1, n2);
		TreeNode<Integer> rightLCA = findLCA(root.getRight(), n1, n2);

		if (null != leftLCA && null != rightLCA) {
			return root;
		}

		return null != leftLCA ? leftLCA : rightLCA;
	}
	
	public static void main(String[] args) {
		TreeNode<Integer> root = new TreeNode<Integer>(1);
		root.setLeft(new TreeNode<Integer>(2));
		root.setRight(new TreeNode<Integer>(3));
		root.getLeft().setLeft(new TreeNode<Integer>(4));
		root.getLeft().setRight(new TreeNode<Integer>(5));
		root.getRight().setLeft(new TreeNode<Integer>(6));
		root.getRight().setRight(new TreeNode<Integer>(7));
		System.out.println(findLCA(root, 2, 4).getData());
		System.out.println(findLCA(root, 4, 7).getData());
	}
}
