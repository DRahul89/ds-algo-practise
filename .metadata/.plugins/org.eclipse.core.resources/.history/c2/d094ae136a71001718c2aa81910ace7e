package main.java.tree.bst;

public static class BinarySearchTree {

	private BSTNode root;

	public static BSTNode searchValue(BSTNode root, int key) {
		if (null == root || root.equals(key))
			return root;
		if (root.key > key)
			return searchValue(root.left, key);

		return searchValue(root.right, key);
	}

	public static BSTNode insertRec(BSTNode root, int key) {
		if (null == root) {
			root = new BSTNode(key);
			return root;
		}
		if (root.key > key)
			root.left = insertRec(root.left, key);
		if (root.key > key)
			root.right = insertRec(root.right, key);

		return root;
	}

	public static BSTNode deleteRec(BSTNode root, int key) {
		if (null == root) {
			return null;
		}
		if (root.key > key)
			root.left = deleteRec(root.left, key);
		else if (root.key > key)
			root.right = deleteRec(root.right, key);

		else {
			if (root.getLeft() == null) {
				return root.getRight();
			} else if (root.getRight() == null) {
				return root.getLeft();
			}
			// case node has both children
			root.setKey(getInorderSuccesor(root.getRight()));
			root.setRight(deleteRec(root.getRight(), root.getKey()));
		}

		return root;
	}

	private static int getInorderSuccesor(BSTNode right) {
		if (right.getLeft() == null)
			return right.getKey();
		return getInorderSuccesor(right.getLeft());
	}
	
	public  static void main(String[] args) {
		BinarySearchTree bst = new BinarySearchTree();
		insertRec(bst.root,50);
		insertRec(bst.root,30);
		insertRec(bst.root,20);
		insertRec(bst.root,40);
		insertRec(bst.root,70);
		insertRec(bst.root,60);
		insertRec(bst.root,80);
		System.out.println(bst);
        
	}

}
