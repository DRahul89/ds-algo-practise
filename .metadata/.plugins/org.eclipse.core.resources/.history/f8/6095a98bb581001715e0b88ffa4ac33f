package main.java.matrix;

/**
 * Kadane’s algorithm for 1D array can be used to reduce the time complexity to
 * O(n^3). The idea is to fix the left and right columns one by one and find the
 * maximum sum contiguous rows for every left and right column pair. We
 * basically find top and bottom row numbers (which have maximum sum) for every
 * fixed left and right column pair. To find the top and bottom row numbers,
 * calculate sun of elements in every row from left to right and store these
 * sums in an array say temp[]. So temp[i] indicates sum of elements from left
 * to right in row i. If we apply Kadane’s 1D algorithm on temp[], and get the
 * maximum sum subarray of temp, this maximum sum would be the maximum possible
 * sum with left and right as boundary columns. To get the overall maximum sum,
 * we compare this sum with the maximum sum so far.
 * 
 * @author rdixi3
 *
 */
public class MaxSumRectangleInMatrix {

	public static int[] kadane(int[] temp) {
		int[] maxResult = { Integer.MIN_VALUE, -1, -1 };
		int localIndex = -1;
		for (int i = 0; i < temp.length; i++) {

		}
		return maxResult;
	}

	public static void maxSumRectangle(int[][] mat, int m, int n) {
		int[] temp = new int[m];
		int[] maxResult = null;
		int result = Integer.MIN_VALUE;
		int leftColInd = -1;
		int rightColInd = -1;
		int topRowInd = -1;
		int bottomRowInd = -1;
		for (int leftCol = 0; leftCol < n; leftCol++) {
			for (int rightCol = leftCol; rightCol < n; rightCol++) {
				for (int i = 0; i < m; i++) {
					temp[i] = temp[i] + mat[i][rightCol];
					maxResult = kadane(temp);
					if (maxResult[0] > result) {
						leftColInd = leftCol;
						rightColInd = rightCol;
						topRowInd = maxResult[1];
						bottomRowInd = maxResult[2];
					}
				}
			}

		}
	}

}
