package main.java.tree;

public class TreeToCircularList {
	/**
	 * left contain previous and right pointer contains next
	 * 
	 * @param left
	 * @param right
	 * @return
	 */
	public static TreeNode<Integer> concatenateTwoCircularList(TreeNode<Integer> leftList,
			TreeNode<Integer> rightList) {
		if (null == leftList)
			return rightList;
		if (null == rightList)
			return leftList;
		// get the last node of left list since its a circular list
		TreeNode<Integer> leftLast = leftList.getLeft();
		// get the last node of right list since its a circular list
		TreeNode<Integer> rightLast = rightList.getLeft();
		
		leftLast.setRight(rightList);
		rightList.setLeft(leftLast);
		rightLast.setRight(leftList);
		leftList.setLeft(rightLast);
		return leftList;

	}

	public static TreeNode<Integer> convertTreeToList(TreeNode<Integer> root) {
		if (null == root)
			return null;
		TreeNode<Integer> left = convertTreeToList(root.getLeft());
		TreeNode<Integer> right = convertTreeToList(root.getRight());

		root.setLeft(root);
		root.setRight(root);

		return concatenateTwoCircularList(concatenateTwoCircularList(left, root), right);
	}

	public static void printCircular(TreeNode<Integer> root) {
		TreeNode<Integer> current = root.getRight();
		System.out.print(root.getData() + "-->");
		while (!root.getData().equals(current.getData())) {
			System.out.print(current.getData() + "-->");
			current = current.getRight();
		}
	}

	public static void main(String[] args) {
		TreeNode<Integer> root = new TreeNode<Integer>(1);
		root.setLeft(new TreeNode<Integer>(2));
		root.setRight(new TreeNode<Integer>(3));
		root.getLeft().setLeft(new TreeNode<Integer>(4));
		root.getLeft().setRight(new TreeNode<Integer>(5));
		root.getRight().setLeft(new TreeNode<Integer>(6));
		root.getRight().setRight(new TreeNode<Integer>(7));
		BinaryTree<Integer> tree = new BinaryTree<Integer>(root);

		System.out.println(tree);
		printCircular(convertTreeToList(root));
	}
}
