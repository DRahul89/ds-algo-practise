package main.java.matrix;

/**
 * Given a n*n matrix where all numbers are distinct, find the maximum length
 * path (starting from any cell) such that all cells along the path are in
 * increasing order with a difference of 1.
 * 
 * We can move in 4 directions from a given cell (i, j), i.e., we can move to
 * (i+1, j) or (i, j+1) or (i-1, j) or (i, j-1) with the condition that the
 * adjacent cells have a difference of 1.
 * 
 * 
 * solution for each cell calculate path length and return max but there will be
 * a lot of overlaping in this case so use memoization
 * 
 * @author rdixi3
 *
 */
public class LongestPathMatrix {

	
	public static int longestPath(int[][] mat,int n){
		int[][] dp = new int[n][n];
		for(int i=0;i<n;i++){
			for(int j=0;j<n;j++){
				dp[i][j]=-1;
			}
		}
		for(int i=0;i<n;i++){
			for(int j=0;j<n;j++){
				if(dp[][] == -1)
			}
		}
	}
}
